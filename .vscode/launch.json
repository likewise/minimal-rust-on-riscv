{
    "version": "0.2.0",
    "inputs": [],
    "configurations": [
        {
            "name": "GDB using OpenOCD pipe",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/target/riscv32imc-unknown-none-elf/debug/app",
            "stopAtEntry": false,
            "stopAtConnect": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            // upload task in tasks.json should upload program into target RAM
            // (have not been able to do it here, at least not with OpenOCD GDB pipe)
            "preLaunchTask": "upload",
            "setupCommands": [
                { "text": "-enable-pretty-printing" },
                { "text": "set pagination off" },
                { "text": "set remote hardware-breakpoint-limit 2" },
                { "text": "set remote hardware-watchpoint-limit 0" },
                { "text": "set print asm-demangle on" },
                { "text": "set confirm off" },
                { "text": "set backtrace limit 32" },
                { "text": "skip -gfile /rustc*" },
                { "text": "skip -gfile **/library/core/src/*/*.rs" },
                { "text": "skip -rfunction ^core::ptr::.*" },
                { "text": "skip -rfunction ^core.*" },
                { "text": "skip -function _start" },
            ],
            "MIMode": "gdb",
            "miDebuggerPath": "/opt/lowrisc-toolchain-gcc-rv32imc-20210412-1/bin/riscv32-unknown-elf-gdb",
            "miDebuggerServerAddress": "| /opt/openocd/bin/openocd -c \"gdb_port pipe; log_output openocd.log\" -f ${workspaceFolder}/openocd_zynqmp_bscane2.cfg",
        },
        {
            "type": "lldb",
            "request": "custom",
            "name": "LLDB",
            "targetCreateCommands": [
                "target create ${workspaceFolder}/target/riscv32imc-unknown-none-elf/debug/app"
            ],
            "processCreateCommands": [
                "gdb-remote localhost:3333"
            ],
            "sourceLanguages": [
                "rust"
            ]
        }
    ]
}